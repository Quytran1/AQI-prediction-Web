import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import random

# H√†m ƒë·ªÉ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ d·ª±a tr√™n ch·ªâ s·ªë AQI
def evaluate_aqi(aqi):
    if aqi == 1:
        return 'T·ªët', '#00e400', 'üòä'  # M√†u xanh l√° c√¢y
    elif aqi == 2:
        return 'Trung b√¨nh', '#ffff00', 'üòê'  # M√†u v√†ng
    elif aqi == 3:
        return 'Kh√¥ng l√†nh m·∫°nh', '#ff7e00', 'üò∑'  # M√†u cam
    elif aqi == 4:
        return 'R·∫•t kh√¥ng t·ªët', '#ff0000', 'ü§¢'  # M√†u ƒë·ªè
    else:
        return 'Nguy hi·ªÉm', '#8f3f97', '‚ò†Ô∏è'  # M√†u t√≠m

# Giao di·ªán ng∆∞·ªùi d√πng
st.title("ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ AQI")

# # Nh·∫≠p ch·ªâ s·ªë AQI
aqi = st.number_input("Nh·∫≠p ch·ªâ s·ªë AQI", min_value=1, max_value=5, step=1)

# T·∫°o n√∫t Random AQI
if st.button("Random AQI"):
    aqi = random.randint(1, 5)
    st.session_state.aqi = aqi
else:
    aqi = aqi

# ƒê√°nh gi√° v√† l·∫•y th√¥ng tin t∆∞∆°ng ·ª©ng
rating, color, emoji = evaluate_aqi(aqi)

# CSS ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªïi m√†u s·∫Øc m∆∞·ª£t m√†
st.markdown(
    """
    <style>
    .aqi-box {
        padding: 20px;
        color: white;
        text-align: center;
        border-radius: 10px;
        transition: background-color 1s ease;
        display: flex;
        align-items: center;
    }
    .aqi-prediction {
        background-color: #333333;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-right: 10px;
    }
    .aqi-content {
        display: flex;
        color: black;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        flex-grow: 1;
    }
    .aqi-content {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }
    .aqi-emoji {
        font-size: 2em;
    }
    </style>
    """, unsafe_allow_html=True
)

# Hi·ªÉn th·ªã k·∫øt qu·∫£
st.markdown(
    f"""
    <div class="aqi-box" style="background-color: {color};">
        <div class="aqi-prediction">AQI Prediction {aqi}</div>
        <div class="aqi-content">
            <h4>ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng AQI</h4>
            <p>{rating}</p>
        </div>
        <div class="aqi-emoji">{emoji}</div>
    </div>
    """, unsafe_allow_html=True
)


# L∆∞u tr·ªØ gi√° tr·ªã AQI v√†o session state
if 'aqi_history' not in st.session_state:
    st.session_state.aqi_history = []

st.session_state.aqi_history.append(aqi)

# Hi·ªÉn th·ªã l·ªãch s·ª≠ AQI
st.subheader("L·ªãch s·ª≠ AQI")
aqi_df = pd.DataFrame(st.session_state.aqi_history, columns=['AQI'])
st.line_chart(aqi_df)

# Th√™m m√¥ t·∫£ chi ti·∫øt v·ªÅ c√°c m·ª©c AQI
st.subheader("Th√¥ng tin chi ti·∫øt v·ªÅ c√°c m·ª©c AQI")
st.markdown(
    """
    - **T·ªët (0-50)**: Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ ƒë·∫°t y√™u c·∫ßu v√† kh√¥ng c√≥ nguy c∆° s·ª©c kh·ªèe.
    - **Trung b√¨nh (51-100)**: Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ ch·∫•p nh·∫≠n ƒë∆∞·ª£c; tuy nhi√™n, ƒë·ªëi v·ªõi m·ªôt s·ªë ng∆∞·ªùi nh·∫°y c·∫£m, c√≥ th·ªÉ c√≥ nh·ªØng t√°c ƒë·ªông ƒë·∫øn s·ª©c kh·ªèe nh·∫π.
    - **Kh√¥ng l√†nh m·∫°nh cho nh√≥m nh·∫°y c·∫£m (101-150)**: Ng∆∞·ªùi nh·∫°y c·∫£m c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng s·ª©c kh·ªèe; c√¥ng ch√∫ng √≠t b·ªã ·∫£nh h∆∞·ªüng h∆°n.
    - **R·∫•t kh√¥ng t·ªët (151-200)**: M·ªçi ng∆∞·ªùi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu c√≥ t√°c ƒë·ªông ƒë·∫øn s·ª©c kh·ªèe; c√°c th√†nh vi√™n c·ªßa nh√≥m nh·∫°y c·∫£m c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng h∆°n.
    - **Nguy hi·ªÉm (201 tr·ªü l√™n)**: C·∫£nh b√°o s·ª©c kh·ªèe v·ªÅ t√¨nh tr·∫°ng kh·∫©n c·∫•p. To√†n b·ªô d√¢n s·ªë c√≥ kh·∫£ nƒÉng b·ªã ·∫£nh h∆∞·ªüng.
    """
)
